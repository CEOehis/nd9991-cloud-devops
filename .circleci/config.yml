version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.2
  node: circleci/node@4.1.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # empty bucket
            aws s3 rb --force s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration-log)
            if(( $SUCCESS=="1" )); then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [client-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: client-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend/dist

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [client-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [client-build]
      - run:
          name: Run security audit on packages
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run security audit on packages
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Stash public IP address of backend instance
          command: |
            BACKEND_URL=$(tail -n 1 .circleci/ansible/inventory.txt)
            echo "Saving backend IP address ${BACKEND_URL}"
            curl -H "Content-Type: text/plain" -H \
            "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT --data "$BACKEND_URL" https://api.memstash.io/values/backendurl
      - run:
          name: Install deps
          command: |
            yum -y install tar gzip
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "18:12:73:49:56:54:fe:2b:74:b7:5b:03:38:b0:c7:db"
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            pip install awscli --upgrade --user
            pip install --user ansible
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
          no_output_timeout: 30m
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migration.log
      - run:
          name: Send migration results to memstash
          command: |
            # check if any migration ran successfully
            cd backend
            if grep -q "has been executed successfully" migration.log; then
              curl -H "Content-Type: text/plain" -H \
              "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "1" https://api.memstash.io/values/migration-log
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backendurl)
            echo "export API_URL=http://${BACKEND_IP}:3030" >> $BASH_ENV
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            echo "${API_URL}"
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - node/install
      - add_ssh_keys:
          fingerprints:
            - "18:12:73:49:56:54:fe:2b:74:b7:5b:03:38:b0:c7:db"
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            pip install awscli --upgrade --user
            pip install --user ansible
      - run:
          name: Deploy backend
          command: |
            cat .circleci/ansible/inventory.txt
            ls -al backend
            ansible-playbook -v .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - node/install
      - aws-cli/install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backendurl)
            echo "export API_URL=http://${BACKEND_IP}:3030" >> $BASH_ENV
      - run:
          name: Backend smoke test.
          command: |
            curl -s -o /dev/null -w "%{http_code}" $API_URL/api/status
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - node/install
      - aws-cli/install
      - run:
          name: Install dependencies
          command: |
            # yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople-cloudfront \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - node/install
      - aws-cli/install
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?starts_with(Name, \`WorkflowID\`)].Value" \
                --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo $STACKS
            echo OldWorkflowID
            echo "export OLD_WORKFLOW_ID=${OldWorkflowID}" >> $BASH_ENV
            echo "export STACKS=${STACKS}" >> $BASH_ENV
            echo "workflowID: ${OldWorkflowID}"
            echo "stacks: ${STACKS}"

      - run:
          name: Remove old stacks and files
          command: |
            echo "workflowID: ${OLD_WORKFLOW_ID}"
            echo "stacks: ${STACKS}"
            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              aws s3 rb --force s3://udapeople-${OLD_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
              echo "Old stacks successfully deleted"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]